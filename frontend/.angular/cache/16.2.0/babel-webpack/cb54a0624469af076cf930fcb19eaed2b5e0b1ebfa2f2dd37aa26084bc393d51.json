{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { EMPTY } from \"rxjs\";\nimport { map, catchError } from \"rxjs/operators\";\nexport let ProductService = class ProductService {\n  constructor(snackBar, http) {\n    this.snackBar = snackBar;\n    this.http = http;\n    this.baseUrl = \"http://localhost:3001/products\";\n  }\n  showMessage(msg, isError = false) {\n    this.snackBar.open(msg, \"X\", {\n      duration: 3000,\n      horizontalPosition: \"right\",\n      verticalPosition: \"top\",\n      panelClass: isError ? [\"msg-error\"] : [\"msg-success\"]\n    });\n  }\n  create(product) {\n    return this.http.post(this.baseUrl, product).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  read() {\n    return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  readById(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  update(product) {\n    const url = `${this.baseUrl}/${product.id}`;\n    return this.http.put(url, product).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  delete(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  errorHandler(e) {\n    this.showMessage(\"An error has occurred!\", true);\n    return EMPTY;\n  }\n};\nProductService = __decorate([Injectable({\n  providedIn: \"root\"\n})], ProductService);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}